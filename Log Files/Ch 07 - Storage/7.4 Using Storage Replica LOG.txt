# 7.4 - Managing Storage Replica
# 
# Run on SRV1, with SRV2, DC1 online


PS C:\Foo> # 1. Getting disk number of the disk holding the S partition
PS C:\Foo> $Part = Get-Partition -DriveLetter S
PS C:\Foo> "S drive on disk [$($Part.DiskNumber)]"
S drive on disk [1]




PS C:\Foo> # 2. Creating S: drive on SRV2
PS C:\Foo> $ScriptBlock = {
             Initialize-Disk -Number $using:Part.DiskNumber -PartitionStyle GPT
             $NewVolHT = @{
              DiskNumber   =  $using:Part.DiskNumber
               FriendlyName = 'Files'
               FileSystem   = 'NTFS'
               DriveLetter  = 'S'
             }
             New-Volume @NweVolHT
           }
PS C:\Foo> Invoke-Command -ComputerName SRV2 -ScriptBlock $ScriptBlock
           

DriveLetter FriendlyName FileSystemType DriveType HealthStatus OperationalStatus SizeRemaining     Size PSComputerName
----------- ------------ -------------- --------- ------------ ----------------- -------------     ---- --------------
S           Files        NTFS           Fixed     Healthy      OK                     63.89 GB 63.98 GB SRV2





# 3. Creating content on S: on SRV1



no output




PS C:\Foo> # 4. Counting files/folders on S:
PS C:\Foo> Get-ChildItem -Path S:\ -Recurse | Measure-Object

Count             : 10100
Average           : 
Sum               : 
Maximum           : 
Minimum           : 
StandardDeviation : 
Property          : 



PS C:\Foo> # 5. Examining the S drive remotely on SRV2
PS C:\Foo> $ScriptBlock2 = {
            Get-ChildItem -Path S:\ -Recurse |
              Measure-Object
           }
PS C:\Foo> Invoke-Command -ComputerName SRV2 -ScriptBlock $ScriptBlock2

Count          : 0
Average        : 
Sum            : 
Maximum        : 
Minimum        : 
Property       : 
PSComputerName : SRV2




PS C:\Foo> # 6. Adding the storage replica feature to SRV1
PS C:\Foo> Add-WindowsFeature -Name Storage-Replica | Out-Null
WARNING: You must restart this server to finish the installation process





PS C:\Foo> # 7. Adding the Storage Replica Feature to SRV2
PS C:\Foo> $SB= {
             Add-WindowsFeature -Name Storage-Replica | Out-Null
           }
PS C:\Foo> Invoke-Command -ComputerName SRV2 -ScriptBlock $SB
          
WARNING: You must restart this server to finish the installation process.



# 8. Restarting SRV2 and waiting for the restart


no console output


# 9. Restarting SRV1 to finish the installation process


no console output


PS C:\Foo> # 10. Creating a G: volume in disk 3 on SRV1
PS C:\Foo> $ScriptBlock3 = {
             Initialize-Disk -Number 3 | Out-Null
             $VolumeHT = @{
              DiskNumber   =  3
              FriendlyName = 'SRLOGS'
              DriveLetter  = 'G'
             }
             New-Volume @VolumeHT
           }
PS C:\Foo> Invoke-Command -ComputerName SRV1 -ScriptBlock $ScriptBlock3
                                                                                                                      
DriveLetter FriendlyName FileSystemType DriveType HealthStatus OperationalStatus SizeRemaining     Size PSComputerName
----------- ------------ -------------- --------- ------------ ----------------- -------------     ---- --------------
G           SRLOGS       NTFS           Fixed     Healthy      OK                     63.84 GB 63.98 GB SRV1




PS C:\Foo> # 11. Creating G: volume on SRV2
PS C:\Foo> Invoke-Command -ComputerName SRV2 -ScriptBlock $ScriptBlock3
                                                                                                                        
DriveLetter FriendlyName FileSystemType DriveType HealthStatus OperationalStatus SizeRemaining     Size PSComputerName
----------- ------------ -------------- --------- ------------ ----------------- -------------     ---- --------------
G           SRLOGS       NTFS           Fixed     Healthy      OK                     63.89 GB 63.98 GB SRV2




PS C:\Foo> # 12. Viewing volumes on SRV1
PS C:\Foo> Get-Volume | Sort-Object -Property Driveletter

DriveLetter FriendlyName FileSystemType DriveType HealthStatus OperationalStatus SizeRemaining       Size
----------- ------------ -------------- --------- ------------ ----------------- -------------       ----
                         FAT32          Fixed     Healthy      OK                     67.25 MB      96 MB
C                        NTFS           Fixed     Healthy      OK                    111.61 GB   127.9 GB
G           SRLOGS       NTFS           Fixed     Healthy      OK                     63.84 GB   63.98 GB
S           Files        NTFS           Fixed     Healthy      OK                     63.83 GB   63.98 GB
W           W-FAT        FAT            Fixed     Healthy      OK                   1023.66 MB 1023.72 MB
X           x-exFAT      exFAT          Fixed     Healthy      OK                        15 GB      15 GB
Y           Y-FAT32      FAT32          Fixed     Healthy      OK                     14.98 GB   14.98 GB
Z           Z-ReFS       ReFS           Fixed     Healthy      OK                     31.78 GB   32.94 GB




PS C:\Foo> # 13. Viewing volumes on SRV2
PS C:\Foo> Invoke-Command -Computer SRV2 -Scriptblock {
             Get-Volume | Sort-Object -Property Driveletter
           }

DriveLetter FriendlyName FileSystemType DriveType HealthStatus OperationalStatus SizeRemaining     Size PSComputerName
----------- ------------ -------------- --------- ------------ ----------------- -------------     ---- --------------
                         FAT32          Fixed     Healthy      OK                     67.26 MB    96 MB SRV2
C                        NTFS           Fixed     Healthy      OK                    115.03 GB 127.9 GB SRV2
G           SRLOGS       NTFS           Fixed     Healthy      OK                     63.89 GB 63.98 GB SRV2
S           Files        NTFS           Fixed     Healthy      OK                     63.89 GB 63.98 GB SRV2



PS C:\Foo> # 14. Creating an SR replica group
PS C:\Foo> $NewSRHT =  @{
             SourceComputerName       = 'SRV1'
             SourceRGName             = 'SRV1RG2'
             SourceVolumeName         = 'S:'
             SourceLogVolumeName      = 'G:'
             DestinationComputerName  = 'SRV2'
             DestinationRGName        = 'SRV2RG2'
             DestinationVolumeName    = 'S:'
             DestinationLogVolumeName = 'G:'
             LogSizeInBytes           = 2gb
           }
PS C:\Foo> New-SRPartnership @SRHT

RunspaceId              : 0da18bca-0a49-4f1a-9bbf-cdd44129984c
DestinationComputerName : SRV2
DestinationRGName       : SRV2RG2
Id                      : 5c52459b-38a9-44ae-8ebd-867d6e19ece0
SourceComputerName      : SRV1
SourceRGName            : SRV1RG2



PS C:\Foo> # 15. Examining the volumes on SRV2
PS C:\Foo> $ScriptBlock3 = {
             Get-Volume |
               Sort-Object -Property DriveLetter |
                 Format-Table
           }
PS C:\Foo> Invoke-Command -ComputerName SRV2 -ScriptBlock $ScriptBlock3

DriveLetter FriendlyName FileSystemType DriveType HealthStatus OperationalStatus SizeRemaining     Size
----------- ------------ -------------- --------- ------------ ----------------- -------------     ----
                         FAT32          Fixed     Healthy      OK                     67.26 MB    96 MB
C                        NTFS           Fixed     Healthy      OK                    115.03 GB 127.9 GB
G           SRLOGS       NTFS           Fixed     Healthy      OK                     61.89 GB 63.98 GB
S                        Unknown        Fixed     Healthy      Unknown                     0 B      0 B




# 16. Reversing the replication


no console output


PS C:\Foo> # 17. Viewing the SR Partnership
PS C:\Foo> Get-SRPartnership

RunspaceId              : 0da18bca-0a49-4f1a-9bbf-cdd44129984c
DestinationComputerName : SRV1
DestinationRGName       : SRV1RG2
Id                      : 5c52459b-38a9-44ae-8ebd-867d6e19ece0
SourceComputerName      : SRV2
SourceRGName            : SRV2RG2





PS C:\Foo> # 18. Examining the files remotely on SRV2
PS C:\Foo> $ScriptBlock4 = {
             Get-ChildItem -Path S:\ -Recurse |
               Measure-Object
           }
PS C:\Foo> Invoke-Command -ComputerName SRV2 -ScriptBlock $ScriptBlock4

Count          : 10100
Average        : 
Sum            : 
Maximum        : 
Minimum        : 
Property       : 
PSComputerName : SRV2


