# Recipe 10.2 - Deploying a Hello World Application 
#
#  Run on CH1




PS C:\Foo> # 1. Finding hello-world container images at the Docker Hub
PS C:\Foo> docker search hello-world
NAME                                       DESCRIPTION                                     STARS     OFFICIAL   AUTOMATED
hello-world                                Hello World! (an example of minimal Dockeriz…   1835      [OK]
kitematic/hello-world-nginx                A light-weight nginx container that demonstr…   152
tutum/hello-world                          Image to test docker deployments. Has Apache…   89                   [OK]
dockercloud/hello-world                    Hello World!                                    19                   [OK]
crccheck/hello-world                       Hello World web server in under 2.5 MB          15                   [OK]
vad1mo/hello-world-rest                    A simple REST Service that echoes back all t…   5                    [OK]
ppc64le/hello-world                        Hello World! (an example of minimal Dockeriz…   2
rancher/hello-world                                                                        2
ansibleplaybookbundle/hello-world-db-apb   An APB which deploys a sample Hello World! a…   2                    [OK]
thomaspoignant/hello-world-rest-json       This project is a REST hello-world API to bu…   1
ansibleplaybookbundle/hello-world-apb      An APB which deploys a sample Hello World! a…   1                    [OK]
strimzi/hello-world-consumer                                                               0
armswdev/c-hello-world                     Simple hello-world C program on Alpine Linux…   0
strimzi/hello-world-producer                                                               0
koudaiii/hello-world                                                                       0
businessgeeks00/hello-world-nodejs                                                         0
strimzi/hello-world-streams                                                                0
tacc/hello-world                                                                           0
garystafford/hello-world                   Simple hello-world Spring Boot service for t…   0                    [OK]
freddiedevops/hello-world-spring-boot                                                      0
tsepotesting123/hello-world                                                                0
okteto/hello-world                                                                         0
rsperling/hello-world3                                                                     0
dandando/hello-world-dotnet                                                                0
kevindockercompany/hello-world       




PS C:\Foo> # 2. Pulling the Docker official hello-world image
PS C:\Foo> docker pull hello-world
Using default tag: latest
latest: Pulling from library/hello-world
2ebf439f800c: Pull complete
59d9f62c09b7: Pull complete
d6884bc3f6c7: Pull complete
Digest: sha256:7d246653d0511db2a6b2e0436cfd0e52ac8c066000264b3ce63331ac66dca625
Status: Downloaded newer image for hello-world:latest
docker.io/library/hello-world:latest

                                                    0



PS C:\Foo> # 3. Checking the Image just downloaded
PS C:\Foo> docker image ls
REPOSITORY    TAG       IMAGE ID       CREATED       SIZE
hello-world   latest    d4d88879abb0   3 weeks ago   297MB                                                  





PS C:\Foo> # 4. Running the hello-world container image
PS C:\Foo> docker run hello-world

Hello from Docker!
This message shows that your installation appears to be working correctly.

To generate this message, Docker took the following steps:
 1. The Docker client contacted the Docker daemon.
 2. The Docker daemon pulled the "hello-world" image from the Docker Hub.
    (windows-amd64, nanoserver-ltsc2022)
 3. The Docker daemon created a new container from that image which runs the
    executable that produces the output you are currently reading.
 4. The Docker daemon streamed that output to the Docker client, which sent it
    to your terminal.

To try something more ambitious, you can run a Windows Server container with:
 PS C:\> docker run -it mcr.microsoft.com/windows/servercore:ltsc2022 powershell

Share images, automate workflows, and more with a free Docker ID:
 https://hub.docker.com/

For more examples and ideas, visit:
 https://docs.docker.com/get-started/




PS C:\Foo> # 5. Getting Server Core image base image
PS C:\Foo> docker pull mcr.microsoft.com/windows/servercore:ltsc2022
ltsc2022: Pulling from windows/servercore
97f65a0ec59e: Pull complete
97b25a378238: Pull complete
Digest: sha256:35c3cb29ef2c9f05e36070d04c79d7fc861c035fa5df2df64ae607a276db42c6
Status: Downloaded newer image for mcr.microsoft.com/windows/servercore:ltsc2022
mcr.microsoft.com/windows/servercore:ltsc2022






PS C:\Foo> # 6. Checking the images available now on CH1
PS C:\Foo> docker image ls
REPOSITORY                             TAG        IMAGE ID       CREATED       SIZE
hello-world                            latest     d4d88879abb0   3 weeks ago   297MB
mcr.microsoft.com/windows/servercore   ltsc2022   5798b78d003a   4 weeks ago   5.08GB





PS C:\Foo> # 7. Running the servercore container image
PS C:\Foo> docker run $ServerCore
Microsoft Windows [Version 10.0.20348.887]
(c) Microsoft Corporation. All rights reserved.




# 8. Creating a function to get docker image details as objects


no output



PS C:\Foo> # 9. Inspecting Server Core Image
PS C:\Foo> $ServerCoreImage = Get-DockerImage | Where-Object name -match servercore
PS C:\Foo> docker inspect $ServerCoreImage.ImageId | ConvertFrom-Json

Id              : sha256:5798b78d003a0eb4c52ddc590a333254e974bdc400f262bd7b4442bb2c6e49a2
RepoTags        : {mcr.microsoft.com/windows/servercore:ltsc2022}
RepoDigests     : {mcr.microsoft.com/windows/servercore@sha256:
                   35c3cb29ef2c9f05e36070d04c79d7fc861c035fa5df2df64ae607a276db42c6}
Parent          : 
Comment         : 
Created         : 06/08/2022 02:59:35
Container       : 
ContainerConfig : @{Hostname=; Domainname=; User=; AttachStdin=False; AttachStdout=False; 
                    AttachStderr=False; Tty=False; OpenStdin=False; StdinOnce=False; Env=; 
                    Cmd=; Image=; Volumes=; WorkingDir=; Entrypoint=; OnBuild=; Labels=}
DockerVersion   :
Author          :
Config          : @{Hostname=; Domainname=; User=; AttachStdin=False; AttachStdout=False; 
                   AttachStderr=False; Tty=False; OpenStdin=False; StdinOnce=False; Env=; 
                   Cmd=System.Object[]; Image=; Volumes=;  
                  WorkingDir=; Entrypoint=; OnBuild=; Labels=}
Architecture    : amd64
Os              : windows
OsVersion       : 10.0.20348.887
Size            : 5083872027
VirtualSize     : 5083872027
GraphDriver     : @{Data=; Name=windowsfilter}
RootFS          : @{Type=layers; Layers=System.Object[]}
Metadata        : @{LastTagTime=01/01/0001 00:00:00}






PS C:\Foo> # 10. Pulling a Server 2019 container image
PS C:\Foo> $Server2019Image = 'mcr.microsoft.com/windows:1809'
PS C:\Foo> docker pull $Server2019Image 
1809: Pulling from windows
b079fa252589: Pull complete
3100d4854554: Pull complete 
Digest: sha256:14241ad3587eb63e81c07e227adfc5b1ee4702d5b047599886fd82144210c479
Status: Downloaded newer image for mcr.microsoft.com/windows:1809
mcr.microsoft.com/windows:1809




PS C:\Foo> # 11. Running older server image
PS C:\Foo> docker run $Server2019Image
docker: Error response from daemon: hcsshim::CreateComputeSystem 
        3c8495f8debb5bf0cb39d141dbf2ba85c20e4c94b1c465e7228331dacf5de2b3: 
        The container operating system does not match the host operating system.







PS C:\Foo> # 12. Running the image with isolation
PS C:\Foo> PS C:\Foo> docker run --isolation=hyperv $Server2019Image
Microsoft Windows [Version 10.0.17763.3287]
(c) 2018 Microsoft Corporation. All rights reserved.





PS C:\Foo> # 13. Checking difference in run times with Hyper-V
PS C:\Foo> # Running with no isolation
PS C:\Foo> $Start1 = Get-Date
PS C:\Foo> docker run hello-world | Out-Null
PS C:\Foo> $End1 = Get-Date
PS C:\Foo> $Time1 = ($End1-$Start1).TotalMilliseconds
PS C:\Foo> # Running with isolation
PS C:\Foo> $Start2 = Get-Date
PS C:\Foo> docker run --isolation=hyperv hello-world | Out-Null
PS C:\Foo> $End2 = get-date
PS C:\Foo> $Time2 = ($End2-$Start2).TotalMilliseconds
PS C:\Foo> # Displaying the time differences
PS C:\Foo> "Without isolation, took : $Time1 milliseconds"
PS C:\Foo> "With isolation, took    : $Time2 milliseconds"
Without isolation, took : 2989.7237 milliseconds
With isolation, took    : 5881.3702 milliseconds




PS C:\Foo> # 14. Viewing system disk usage
PS C:\Foo> docker system df
TYPE            TOTAL     ACTIVE    SIZE      RECLAIMABLE
Images          3         3         21.14GB   0B (0%)
Containers      5         0         0B        0B
Local Volumes   0         0         0B        0B
Build Cache     0         0         0B        0B


PS C:\Foo> # 15. Viewing active containers
PS C:\Foo> docker container ls -a
CONTAINER ID   IMAGE                                           COMMAND                    CREATED          STATUS                      PORTS     NAMES
13e6b90c2a2a   hello-world                                     "cmd /C 'type C:\\hel…"    4 minutes ago    Exited (0) 4 minutes ago              dreamy_cannon
8287cd70030b   hello-world                                     "cmd /C 'type C:\\hel…"    4 minutes ago    Exited (0) 4 minutes ago              objective_ardinghelli
6c0cb5e6505f   mcr.microsoft.com/windows:1809                  "c:\\windows\\system32…"   8 minutes ago    Exited (0) 7 minutes ago              condescending_hugle
3c8495f8debb   mcr.microsoft.com/windows:1809                  "c:\\windows\\system32…"   9 minutes ago    Created                               kind_bassi
c42a3e2b23aa   mcr.microsoft.com/windows/servercore:ltsc2022   "c:\\windows\\system32…"   47 minutes ago   Exited (0) 46 minutes ago             vigilant_swirles



# 16. Removing active containers


no output



# 17. Removing all docker images

no output

PS C:\Foo> # 18. Removing other docker detritus
PS C:\Foo> docker system prune -f
Total reclaimed space: 0B




PS C:\Foo> # 19. Checking images and containers
PS C:\Foo> docker image ls

REPOSITORY   TAG       IMAGE ID   CREATED   SIZE

PS C:\Foo> docker container ls

CONTAINER ID   IMAGE     COMMAND   CREATED   STATUS    PORTS     NAMES


