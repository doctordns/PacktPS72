# 6.3 - Discovering Logon Events
#
# Run on DC1


PS C:\Foo> # 1. Getting Security log events
PS C:\Foo> $SecLog = Get-WinEvent -ListLog Security
PS C:\Foo> "Security Event log entries:    [{0,10:N0}]" -f $Seclog.RecordCount
Security Event log entries:    [    80,792]




PS C:\Foo> # 2. Getting all Windows Security log event details
PS C:\Foo> $SecEvents = Get-WinEvent -LogName Security
PS C:\Foo> "Found $($SecEvents.count) security events on DC1"
Found 80792 security events on DC1






PS C:\Foo> # 3: Examining Security event log event members
PS C:\Foo> $SecEvents |
             Get-Member

   TypeName: System.Diagnostics.Eventing.Reader.EventLogRecord

Name                 MemberType   Definition
----                 ----------   ----------
Dispose              Method       void Dispose(), void IDisposable.Dispose()
Equals               Method       bool Equals(System.Object obj)
FormatDescription    Method       string FormatDescription(), string FormatDescription(System.Collections.
                                         Generic.IEnumerable[System.Object] values)
GetHashCode          Method       int GetHashCode()
GetPropertyValues    Method       System.Collections.Generic.IList[System.Object] GetPropertyValues(System.
                                         Diagnostics.Eventing.Reader.EventLogPropertySelector propertySelector)        
GetType              Method       type GetType()
ToString             Method       string ToString()
ToXml                Method       string ToXml()
Message              NoteProperty string Message=An account was logged off.â€¦
ActivityId           Property     System.Nullable[guid] ActivityId {get;}
Bookmark             Property     System.Diagnostics.Eventing.Reader.EventBookmark Bookmark {get;}
ContainerLog         Property     string ContainerLog {get;}
Id                   Property     int Id {get;}
Keywords             Property     System.Nullable[long] Keywords {get;}
KeywordsDisplayNames Property     System.Collections.Generic.IEnumerable[string] KeywordsDisplayNames {get;}
Level                Property     System.Nullable[byte] Level {get;}
LevelDisplayName     Property     string LevelDisplayName {get;}
LogName              Property     string LogName {get;}
MachineName          Property     string MachineName {get;}
MatchedQueryIds      Property     System.Collections.Generic.IEnumerable[int] MatchedQueryIds {get;}
Opcode               Property     System.Nullable[short] Opcode {get;}
OpcodeDisplayName    Property     string OpcodeDisplayName {get;}
ProcessId            Property     System.Nullable[int] ProcessId {get;}
Properties           Property     System.Collections.Generic.IList[System.Diagnostics.Eventing.Reader.
                                         EventProperty] Properties {get;}
ProviderId           Property     System.Nullable[guid] ProviderId {get;}
ProviderName         Property     string ProviderName {get;}
Qualifiers           Property     System.Nullable[int] Qualifiers {get;}
RecordId             Property     System.Nullable[long] RecordId {get;}
RelatedActivityId    Property     System.Nullable[guid] RelatedActivityId {get;}
Task                 Property     System.Nullable[int] Task {get;}
TaskDisplayName      Property     string TaskDisplayName {get;}
ThreadId             Property     System.Nullable[int] ThreadId {get;}
TimeCreated          Property     System.Nullable[datetime] TimeCreated {get;}
UserId               Property     System.Security.Principal.SecurityIdentifier UserId {get;}
Version              Property     System.Nullable[byte] Version {get;}






PS C:\Foo> # 4. Summarizing security events by event ID
PS C:\Foo> $SecEvents | 
             Sort-Object -Property Id | 
               Group-Object -Property ID | 
                 Sort-Object -Property Name |
                   Format-Table -Property Name, Count

Name Count
---- -----
1100     7
1101     2
4608    11
4616    23
4624 23829
4625     5
4634 22346
4647     6
4648   171
4662   242
4672 21887
4688   122
4696    11
4713     1
4717    17
4718    14
4720    15
4722    20
4724    20
4726     5
4727    13
4728     5
4731    36
4732    20
4733     1
4734     1
4735   110
4737    19
4738    43
4739     5
4741     8
4742    29
4754     4
4755     9
4756     2
4768   201
4769   620
4770    94
4776    26
4781    26
4798    20
4799   185
4826    11
4902    11
4904     2
4907   872
5024    10
5033    10
5058  2034
5059  1022
5061  2040
5379  4545
5382     4





PS C:\Foo> # 5. Getting all successful logon events on DC1
PS C:\Foo> $Logons = $SecEvents | Where-Object ID -eq 4624   # logon event
PS C:\Foo> "Found $($Logons.Count) logon events on DC1"
Found 23829 logon events on DC1






PS C:\Foo> # 6. Getting all failed logon events on DC1
PS C:\Foo> $FLogons = $SecEvents | Where-Object ID -eq 4625   # failed logon event
PS C:\Foo> "Found $($FLogons.Count) failed logon events on DC1"
Found 5 failed logon events on DC1



PS C:\Foo> # 6. Getting all failed logon events on DC1
PS C:\Foo> $FLogons = $SecEvents | Where-Object ID -eq 4625   # failed logon event
PS C:\Foo> "Found $($FLogons.Count) failed logon events on DC1"
Found 5 failed logon events on DC1





# 7. Creating a summary array of successful logon events



No Console output



PS C:\Foo> # 8. Summarizing successful logon events on DC1
PS C:\Foo> $LogonEvents | 
             Group-Object -Property LogonType |
               Sort-Object -Property Name |
                 Select-Object -Property Name,Count

Name Count
---- -----
0       11
10       6
2       99
3    22383
5     1328
7        2






# 9. Creating a summary array of failed logon events on DC1





PS C:\Foo> # 10. Summarizing failed logon events on DC1
PS C:\Foo> $FLogonEvents | 
             Group-Object -Property Account |
               Sort-Object -Property Name |
                 Format-Table Name, Count

Name            Count
----            -----
Reskit\Malcolm      2
Reskit\BobbyW       3








