# 12.1 Using the PowerShell Script Analyzer

# Run on SRV1



PS C:\Foo> # 1. Discovering the Powershell Script Analyzer module
PS C:\Foo> Find-Module -Name PSScriptAnalyzer |
             Format-List Name, Version, Type, Desc*, Author, Company*, *Date, *URI*

Name          : PSScriptAnalyzer
Version       : 1.21.0
Type          : Module
Description   : PSScriptAnalyzer provides script analysis and checks for 
                potential code defects in the scripts by applying a group 
                of built-in or customized rules on the scripts being analyzed.
Author        : Microsoft Corporation
CompanyName   : {PowerShellTeam, JamesTruher-MSFT, rjmholt}
PublishedDate : 29/09/2022 20:14:59
InstalledDate : 
UpdatedDate   : 
LicenseUri    : https://github.com/PowerShell/PSScriptAnalyzer/blob/master/LICENSE
ProjectUri    : https://github.com/PowerShell/PSScriptAnalyzer
IconUri       : https://raw.githubusercontent.com/powershell/psscriptanalyzer/master/logo.png




# 2. Installing the script analyzer module


no output




PS C:\Foo> # 3. Discovering the commands in the Script Analyzer module
PS C:\Foo> Get-Command -Module PSScriptAnalyzer

CommandType Name                   Version Source
----------- ----                   ------- ------
Cmdlet      Get-ScriptAnalyzerRule 1.21.0  PSScriptAnalyzer
Cmdlet      Invoke-Formatter       1.21.0  PSScriptAnalyzer
Cmdlet      Invoke-ScriptAnalyzer  1.21.0  PSScriptAnalyzer




PS C:\Foo> # 4. Discovering analyzer rules
PS C:\Foo> Get-ScriptAnalyzerRule |
             Group-Object -Property Severity |
               Sort-Object -Property Count -Descending

Count Name        Group
----- ----        -----
   50 Warning     {PSAlignAssignmentStatement, PSAvoidUsingCmdletAliases, PSAvoidAssignmentT…
   11 Information {PSAvoidUsingPositionalParameters, PSAvoidTrailingWhitespace, PSAvoidUsing…
    7 Error       {PSAvoidUsingUsernameAndPasswordParams, PSAvoidUsingComputerNameHardcoded,…




PS C:\Foo> # 5. Examining a rule
PS C:\Foo> Get-ScriptAnalyzerRule | 
             Select-Object -First 1 |
               Format-List

Name        : 
Severity    : Warning
Description : Line up assignment statements such that the assignment operator are aligned.
SourceName  : PS



# 6. Creating a script file with issues


no output





PS C:\Foo> # 7. Checking the newly created script file
PS C:\Foo> Get-ChildItem C:\Foo\Bad.ps1

    Directory: C:\Foo

Mode           LastWriteTime  Length Name
----           -------------  ------ ----
-a---    26/10/2022    19:38     567 Bad.ps1




PS C:\Foo> PS C:\Foo> # 8. Analyzing the script file
PS C:\Foo> Invoke-ScriptAnalyzer -Path C:\Foo\Bad.ps1 |
             Sort-Object -Property Line

RuleName                              Severity     ScriptName Line  Message
--------                              --------     ---------- ----  -------
PSAvoidUsingCmdletAliases             Warning      Bad.ps1    5    'gps' is an alias of 'Get-Process'.
                                                                   Alias can introduce possible problems
                                                                   and make scripts hard to maintain.
                                                                   Please consider changing alias to its
                                                                   full content.
PSUseDeclaredVarsMoreThanAssignments  Warning      Bad.ps1    5    The variable 'Procs' is assigned but
                                                                   never used.
PSUseDeclaredVarsMoreThanAssignments  Warning      Bad.ps1    7    The variable 'Services' is assigned but
                                                                   never used.
PSAvoidOverwritingBuiltInCmdlets      Warning      Bad.ps1    11   'Get-ChildItem' is a cmdlet that is
                                                                   included with PowerShell (version
                                                                   core-6.1.0-windows) whose definition
                                                                   should not be overridden
PSAvoidUsingComputerNameHardcoded    Error        Bad.ps1    13    The ComputerName parameter of cmdlet
                                                                   'Test-Connection' is hardcoded. This
                                                                   will expose sensitive information about
                                                                   the system if the script is shared.
PSAvoidTrailingWhitespace            Information  Bad.ps1    15    Line has trailing whitespace
PSUseDeclaredVarsMoreThanAssignments Warning      Bad.ps1    15    The variable 'foobar' is assigned but
                                                                   never used.
PSAvoidGlobalVars                    Warning      Bad.ps1    17    Found global variable 'Global:foo'.       




# 9. Defining a function to format more nicely



no console output



# 10. Defining formatting settings


no console output



PS C:\Foo> # 11. Invoking formatter
PS C:\Foo> Invoke-Formatter -ScriptDefinition $Script1 -Settings $Settings
function foo {
    "hello!"
    Get-ChildItem -Path C:\FOO
}



PS C:\Foo> # 12. Changing settings and reformatting
PS C:\Foo> $Settings.Rules.PSPlaceOpenBrace.OnSameLine = $False
PS C:\Foo> Invoke-Formatter -ScriptDefinition $Script1 -Settings $Settings
function foo
{
    "hello!"
    Get-ChildItem -Path C:\FOO
}


